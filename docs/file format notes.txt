Ships
ShipClasses
Subsystems
Weapons

new entries added to end with a separate index kept in memory
modified entries that change size are flagged deleted and the modified version added to the end
eof shifted to end

if this file format was used for a saved game file, chunk types would be mixed. might need multiple indices? although wouldn't the whole file just be loaded?


File Format:        FileHeader
                    ChunkHeader
                    ChunkData
                    ...
                    IndexHeader
                    IndexTable
                    EOF

file_flags:
    good            0x0000 0001
    modified        0x0000 0010     // set if anything in the file was ever changed this session
    index rebuild   0x0000 0100     // set if index needs to be rebuilt
    file rebuild    0x0000 1000     // set if chunks needs to be resorted and file rebuilt
    open            0x0001 0000     // set if file is open and being accessed
    bad             0x1000 0000     // for any kind of error

chunk_flags:
    good            0x0000 0001
    modified        0x0000 0010     // set if record has been changed this session
    incomplete      0x0000 0100     // set if record is missing required data
    deleted         0x0000 1000     // set if record has been deleted
    relocate        0x0001 0000     // set if record has been relocated
    resort          0x0010 0000     // set if record needs to be resorted
    bad             0x1000 0000     // for any kind of error


FileType:           "SHIP"          // Ship database
                    "SCLS"          // Ship Class database
                    "SSYS"          // Subsystem database
                    "WEAP"          // Weapons database
                    "OFFR"          // Officer database
                    0x00            // empty file
                    0x11            // Ship database
                    0x12            // Ship Class database
                    0x21            // Subsystem database
                    0x22            // Weapon database
                    0x31            // Officer database

ChunkType:          "SHP"           // Ship record
                    "CLS"           // ShipClass record
                    "SYS"           // Subsystem record
                    "WPN"           // Weapon record
                    "OFF"           // Officer record
                    0xA1            // Ship record
                    0xA2            // ShipClass record
                    0xB1            // Subsystem record
                    0xB2            // Weapon record
                    0xC1            // Officer record



MagicBytes:         0C A7 CA FE 53 48 49 50 44 42 00
                                 S  H  I  P  D  B \0
eof:                0E 0F

FILE HEADER
----
11  byte[11]        magic_bytes
1   uint8_t         file_type
1   char            file_version    // 1
1	Flags           file_flags
4   uint32_t        file_size
4   offset_t        index_offset
4   offset_t        data_offset
6	char[6]         head_padding
----
32

INDEX HEADER
----
2   chunk_size_t    index_size
2   uint16_t        index_count
2   uint16_t        record_size
----
6

INDEX RECORD
----
2   index_t         entry_index
4   offset_t        entry_offset
----
6

CHUNK HEADER
----
1   uint8_t         chunk_type
1   uint8_t         chunk_flags
2   uint16_t        chunk_size
2   index_t         chunk_index     // important for redirected chunks to maintain correct file index
4   offset_t        chunk_redirect  // offset of redirected record for resized records
----
10


SHIP CHUNK
----
8   ShipRegistry    ship_registry   // flag code, hull rating, and 8-digit hid
1   uint8_t         name_len
x   char[x]         name
2   index_t         *ship_class     // index of ship_class (in other file)
1   ShipSize        size            // 0 - 20
4   int32_t         speed
4   int32_t         maneuverability
4   int32_t         hull_points
4   int32_t         armor_points
4   int32_t         shield_points
2   uint16_t        crew_min
2   uint16_t        crew_standard
2   uint16_t        crew_max
2   index_t         *captain                // index of officer (in other file)
2   index_t         *engineer
2   index_t         *navigator
2   index_t         *helm
2   index_t         *operations
2   index_t         *weapons
2   index_t         *reactor_index          // index in ship_components file
2   index_t         *thruster_index
2   index_t         *ftl_drive_index
2   index_t         *computer_system_index
2   index_t         *armor_type_index
2   index_t         *shield_generator_index
8   WeaponSlots     weapon_slots
x   Index[x]        *light_weapons          // index in weapons file
x   Index[x]        *medium_weapons
x   Index[x]        *heavy_weapons
x   Index[x]        *missile_weapons
----
66+

ShipRegistry
----
3   FlagCode        flag_code               // 3 character flag code
1   HullRating      hull_rating             // ftl and use rating
4   uint32_t        hull_id                 // unique 8-digit hull identification number
----
8

HullRating
----
bits    0x0000 0000
          use  FTL

use rating:     0   unknown/other           // U
                1   personal                // G
                2   passenger               // L
                3   merchant                // M
                4   industrial              // N
                5   exploration             // P
                6   government              // Z

FTL rating:     1   system                  // A
                2   gate                    // B
                3   restricted              // C
                4   unrestricted            // X




ShipClass : AbstractShip
    manufacturer
    base_cost
    is_obsolete
    *predecessor
    *replacement

StarShip : AbstractShip
    name
    *ShipClass
    Captain
    Officers
        engineer
        navigator
        helm
        operations
        weapons



WeaponSlots
----
1   uint8_t         max light slots
1   uint8_t         max medium slots
1   uint8_t         max heavy slots
1   uint8_t         max missile slots
1   uint8_t         occupied light slots
1   uint8_t         occupied medium slots
1   uint8_t         occupied heavy slots
1   uint8_t         occupied missile slots
----
8



