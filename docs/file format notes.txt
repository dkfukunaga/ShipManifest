Ships
ShipClasses
Subsystems
Weapons

new entries added to end with a separate index kept in memory
modified entries that change size are flagged deleted and the modified version added to the end
eof shifted to end



File Format:        FileHeader
                    DataSection
                      DataTable
                      ...
                    IndexSection
                      IndexTable
                      ...
                    EOF


typedefs
----
offset_t            uint32_t
index_t             uint16_t


FILE FLAGS
uint8_t
----
1   FileFlags       good            // 0x00000001
1   FileFlags       modified        // 0x00000010
1   FileFlags       rebuild_index   // 0x00000100
1   FileFlags       resort          // 0x00001000
1   FileFlags       open            // 0x00010000
1   FileFlags       bad             // 0x10000000

FILE SIGNATURE
uint8_t[10]
----
10  uint8_t[10]     ship_registry   // 0x0C 0xA7 0xCA 0xFE 0x53 0x48 0x50 0x52 0x45 0x47
                                    // ("....SHPREG")

FILE TYPE
uint8_t[4]
----
4   FileType        ships           // 0x53 0x48 0x4C 0x50 ("SHIP")
4   FileType        ship_classes    // 0x53 0x43 0x76 0x53 ("SCLS")
4   FileType        ship_components // 0x53 0x43 0x4D 0x50 ("SCMP")
4   FileType        game_characters // 0x47 0x43 0x48 0x52 ("GCHR")

SECTION TYPE
uint8_t[4]
----
4   SectionType     data            // 0x3A 0x44 0x41 0x54 (":DAT")
4   SectionType     index           // 0x3A 0x4C 0x44 0x58 (":IDX")
4   SectionType     eof             // 0x3A 0x45 0x4F 0x46 (":EOF")

DATA TYPE
uint8_t[2]
----
2   DataType        ship            // 0x53 0x50 ("SP")
2   DataType        ship_class      // 0x43 0x76 ("CL")
2   DataType        subsystem       // 0x53 0x42 ("SB")
2   DataType        weapon          // 0x57 0x50 ("WP")
2   DataType        officer         // 0x4F 0x46 ("OF")


FILE HEADER
----
10  FileSig         sig             // file signature
1	FileFlags       flags           // file status flags
1   char            version         // version number
4   FileType        type            // file type
4   uint32_t        size            // size of file in bytes
4   offset_t        index_offset    // offset of index section
----
24

SECTION HEADER
----
4   uint32_t        size            // size of section in bytes (excluding header)
4   SectionType     type            // data, index, eof
----
8

TABLE HEADER
----
4   uint32_t        size            // size of table in bytes (excluding header)
2   datatype_t      type            // ship, ship_class, subsystem, weapon, officer
2   uint16_t        count           // count of records in table
----
8

DATA RECORD
----
2   index_t         index           // 0 value indicates deleted record
2   uint16_t        size            // size of record in bytes (excluding header)
4   offset_t        redirect        // non-zero value gives offset for relocated record
----
8

INDEX RECORD
----
2   index_t         index           // data record index
4   offset_t        offset          // data record offset
----
6






SHIP CHUNK
----
8   ShipRegistry    ship_registry   // flag code, hull rating, and 8-digit hid
1   uint8_t         name_len
x   char[x]         name
2   index_t         *ship_class     // index of ship_class (in other file)
1   ShipSize        size            // 0 - 20
4   int32_t         speed
4   int32_t         maneuverability
4   int32_t         hull_points
4   int32_t         armor_points
4   int32_t         shield_points
2   uint16_t        crew_min
2   uint16_t        crew_standard
2   uint16_t        crew_max
2   index_t         *captain                // index of officer (in other file)
2   index_t         *engineer
2   index_t         *navigator
2   index_t         *helm
2   index_t         *operations
2   index_t         *weapons
2   index_t         *reactor_index          // index in ship_components file
2   index_t         *thruster_index
2   index_t         *ftl_drive_index
2   index_t         *computer_system_index
2   index_t         *armor_type_index
2   index_t         *shield_generator_index
8   WeaponSlots     weapon_slots
x   Index[x]        *light_weapons          // index in weapons file
x   Index[x]        *medium_weapons
x   Index[x]        *heavy_weapons
x   Index[x]        *missile_weapons
----
66+

ShipRegistry
----
3   FlagCode        flag_code               // 3 character flag code
1   HullRating      hull_rating             // ftl and use rating
4   uint32_t        hull_id                 // unique 8-digit hull identification number
----
8

HullRating
----
bits    0x0000 0000
          use  FTL

use rating:     0   unknown/other           // U
                1   personal                // G
                2   passenger               // L
                3   merchant                // M
                4   industrial              // N
                5   exploration             // P
                6   government              // Z

FTL rating:     1   system                  // A
                2   gate                    // B
                3   restricted              // C
                4   unrestricted            // X




ShipClass : AbstractShip
    manufacturer
    base_cost
    is_obsolete
    *predecessor
    *replacement

StarShip : AbstractShip
    name
    *ShipClass
    Captain
    Officers
        engineer
        navigator
        helm
        operations
        weapons



WeaponSlots
----
1   uint8_t         max light slots
1   uint8_t         max medium slots
1   uint8_t         max heavy slots
1   uint8_t         max missile slots
1   uint8_t         occupied light slots
1   uint8_t         occupied medium slots
1   uint8_t         occupied heavy slots
1   uint8_t         occupied missile slots
----
8



