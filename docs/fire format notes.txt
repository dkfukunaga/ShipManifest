Ships
ShipClasses
Subsystems
Weapons

new entries added to end with a separate index kept in memory
modified entries that change size are flagged deleted and the modified version added to the end
eof shifted to end

if this file format was used for a saved game file, chunk types would be mixed. might need multiple indices? although wouldn't the whole file just be loaded?


File Format:        FileHeader
                    IndexHeader
                    IndexTable
                    ChunkHeader
                    ChunkData
                    ...
                    EOF

file_flags:
    good            0x0000 0001
    modified        0x0000 0010     // set if anything in the file was ever changed this session
    index rebuild   0x0000 0100     // set if index needs to be rebuilt
    file rebuild    0x0000 1000     // set if chunks needs to be resorted and file rebuilt
    open            0x0001 0000     // set if file is open and being accessed
    bad             0x1000 0000     // for any kind of error

chunk_flags:
    good            0x0000 0001
    modified        0x0000 0010     // set if record has been changed this session
    incomplete      0x0000 0100     // set if record is missing required data
    deleted         0x0000 1000     // set if record has been deleted
    relocate        0x0001 0000     // set if record has been relocated
    resort          0x0010 0000     // set if record needs to be resorted
    bad             0x1000 0000     // for any kind of error


FileType:           "SHIP"          // Ship database
                    "SCLS"          // Ship Class database
                    "SSYS"          // Subsystem database
                    "WEAP"          // Weapons database
                    "OFFR"          // Officer database

ChunkType:          "SHP"           // Ship record
                    "CLS"           // ShipClass record
                    "SYS"           // Subsystem record
                    "WPN"           // Weapon record
                    "OFF"           // Officer record



MagicBytes:	 		CA 70 CA FE 53 48 49 50
eof: 				0E 0F

FILE HEADER
----
8	byte[8]			magic_bytes     // CA 70 CA FE 53 48 49 50
4	char[4]			file_type
1	char			file_version    // 1
1	byte			file_flags
4   int32_t         file_size
4   Offset 			index_offset
4   Offset          data_offset
4   uint32_t        data_count      // number of entries
2	char[2]			head_padding
----
32

INDEX HEADER
----
4   uint32_t        index_size
4   uint32_t        index_count
----
8

INDEX TABLE
----
2   Index           entry_index
2   uint16_t        entry_size
4   Offset          entry_offset
----
8

CHUNK HEADER
----
3   char[3]         chunk_type
1   byte            chunk_flags
2   uint32_t        chunk_size
2   Index           chunk_index     // important for redirected chunks to maintain correct file index
4   Offset          chunk_redirect  // offset of redirected record for resized records
----
12


SHIP CHUNK
----
8   ShipRegistry    ship_registry   // flag code, hull rating, and 8-digit hid
1   uint8_t         name_len
x   char[x]         name
2   Index           *ship_class     // index of ship_class (in other file)
1   ShipSize        size            // 0 - 20
4   int32_t         speed
4   int32_t         maneuverability
4   int32_t         hull_points
4   int32_t         armor_points
4   int32_t         shield_points
2   uint16_t        crew_min
2   uint16_t        crew_standard
2   uint16_t        crew_max
2   Index           *captain                // index of officer (in other file)
2   Index           *engineer
2   Index           *navigator
2   Index           *helm
2   Index           *operations
2   Index           *weapons
2   Index           *reactor_index          // index in ship_components file
2   Index           *thruster_index
2   Index           *ftl_drive_index
2   Index           *computer_system_index
2   Index           *armor_type_index
2   Index           *shield_generator_index
4   WeaponSlots     weapon_slots
x   Index[x]        *light_weapons          // index in weapons file
x   Index[x]        *medium_weapons
x   Index[x]        *heavy_weapons
x   Index[x]        *missile_weapons
----
66+

ShipRegistry
----
3   FlagCode            flag_code           // 3 character flag code
1   HullRating          hull_rating         // ftl and use rating
4   uint32_t            hull_id             // unique 8-digit hull identification number
----
8

HullRating
----
bits    0x0000 0000
          FTL  use

FTL rating:
    0   system              // A
    1   gate                // B
    2   restrictred         // C
    3   unrestricted        // X
use rating:
    0   personal            // C
    1   passenger           // D
    2   merchant            // M
    3   industrial          // N
    4   exploration         // X
    5   government          // Z




ShipClass : AbstractShip
    manufacturer
    base_cost
    is_obsolete
    *predecessor
    *replacement

StarShip : AbstractShip
    name
    *ShipClass
    Captain
    Officers
        engineer
        navigator
        helm
        operations
        weapons



WeaponSlots
----
bits    0x0000 0000 0000 0000 0000 0000 0000 0000
          LLLL MMMM HHHH SSSS llll mmmm hhhh ssss

max 15 slots of any one type

L   max light slots
M   max medium slots
H   max heavy slots
S   max missile slots
l   occupied light slots
m   occupied medium slots 
h   occupied heavy slots
s   occupied missile slots



